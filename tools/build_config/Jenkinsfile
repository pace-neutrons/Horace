#!groovy

@Library('PACE-shared-lib') import pace.common.PipeLineInfo

pli = new PipeLineInfo(env.JOB_BASE_NAME)

properties([
  parameters([
    string(
      defaultValue: pli.branch_name,
      description: 'The name of the branch to build. Affects non-PR builds only. *',
      name: 'BRANCH_NAME',
      trim: true
    ),
    string(
      defaultValue: pli.release_type,
      description: 'The type of the build e.g. "nightly", "release", "pull_request", "benchmark". *',
      name: 'RELEASE_TYPE',
      trim: true
    ),
    string(
      defaultValue: utilities.get_agent(pli.os),
      description: 'The agent to execute the pipeline on. *',
      name: 'AGENT',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The release number of the Matlab to load e.g. R2019b.',
      name: 'MATLAB_VERSION',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The version of CMake to run the build with. Affects Linux builds only.',
      name: 'CMAKE_VERSION',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The version of GCC to build with. Affects Linux builds only.',
      name: 'GCC_VERSION',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The version of Python to build with. Affects Linux builds only.',
      name: 'PYTHON_VERSION',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The year of the version of Visual Studio to build with. Affects Windows builds only.',
      name: 'VS_VERSION',
      trim: true
    ),
    string(
      defaultValue: '',
      description: 'The version of CppCheck tooling to load to provide the code-style checks.',
      name: 'CPPCHECK_VERSION',
      trim: true
    ),
    booleanParam(
      defaultValue: true,
      description: 'If this pipeline is to build docs.',
      name: 'BUILD_DOCS'
    ),
    booleanParam(
      defaultValue: false,
      description: 'If this pipeline is to run benchmarks.',
      name: 'RUN_BENCHMARKS'
    )
  ])
])

if (env.BRANCH_NAME) {
  currentBuild.description = "Branch: ${env.BRANCH_NAME}"
} else if (env.PR_NUMBER) {
  currentBuild.displayName = "#${env.BUILD_NUMBER} PR-${env.PR_NUMBER}"
  currentBuild.description = "Git-SHA: ${env.PR_COMMIT_SHA.take(7)}"
}

Boolean run_build_stage = !(env?.PR_LABELS =~ "do-not-build")
Boolean run_test_stage = !(env?.PR_LABELS =~ "(do-not-build|do-not-test)") && env?.RELEASE_TYPE != 'benchmark'
Boolean run_benchmark_stage = env?.RELEASE_TYPE == 'benchmark' || env?.RUN_BENCHMARK

pipeline {
  agent {
    label env.AGENT
  }

  environment {
    // SL7 nodes had matlab/R20xx[ab] + matlab/2020b. Rocky8 nodes do not, only matlab/20xx[ab]
    // removing the R here from the pipeline library standard version so as not to break other library dependent pipelines
    MATLAB_VERSION = utilities.get_param('MATLAB_VERSION', pli.matlab_release)
    MATLAB_MODULE = utilities.get_param('MATLAB_VERSION', pli.matlab_release.minus('R'))
    CMAKE_VERSION = utilities.get_param('CMAKE_VERSION', '3.26')
    GCC_VERSION = utilities.get_param('GCC_VERSION', '13')
    PYTHON_VERSION = utilities.get_param('PYTHON_VERSION', '3.8')
    VS_VERSION = utilities.get_param('VS_VERSION', '2019')
    CPPCHECK_VERSION = utilities.get_param('CPPCHECK_VERSION', '2.13')
    BUILD_DOCS = utilities.get_param('BUILD_DOCS', 'true')
  }


  stages {

    stage('Notify') {
      steps {
        script {
          if (env.PR_LABELS) {
            echo "Found PR labels: ${env.PR_LABELS}"
          }
        }
        post_github_status("pending", "The build is running")
      }
    }

    stage('Configure') {
      steps {
        script {
          if (env.BUILD_DOCS?.toBoolean()) {
            // Limiting sphinxcontrib-matlabdomain version due to use of Python 3.8 features in latest
            if (isUnix()) {
              sh '''
            module load python/\$PYTHON_VERSION &&
            python -m pip install --user --upgrade pip &&
            python -m pip install --user sphinx &&
            python -m pip install --user sphinx_rtd_theme &&
            python -m pip install --user sphinxcontrib-matlabdomain==0.14.1
            '''
            } else {
              powershell '''
             pip install --user sphinx
             pip install --user sphinx_rtd_theme
             pip install --user sphinxcontrib-matlabdomain==0.14.1
            '''
            }
          }
          if (isUnix()) {
            sh '''
              module load python/\$PYTHON_VERSION &&
              export PATH=${PATH}:~/.local/bin &&
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_MODULE &&
              module load gcc/\$GCC_VERSION &&
              module load cppcheck/\$CPPCHECK_VERSION &&
              ./tools/build_config/build.sh \
                --cmake_flags \"-DHorace_RELEASE_TYPE=\$RELEASE_TYPE\" \
                --matlab_release \$MATLAB_VERSION \
                --print_versions \
                --configure
              '''
          } else {
            powershell '''
              ./tools/build_config/build.ps1 \
                -cmake_flags \"-DHorace_RELEASE_TYPE=\$env:RELEASE_TYPE\" \
                -matlab_release \$env:MATLAB_VERSION \
                -vs_version \$env:VS_VERSION \
                -print_versions \
                -configure
          '''
          }
        }
      }
    }

    stage('Analyze') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_MODULE &&
              module load gcc/\$GCC_VERSION &&
              module load cppcheck/\$CPPCHECK_VERSION &&
              ./tools/build_config/build.sh --analyze
            '''
          }
          else {
            powershell '''
              Write-Output \"Static Analysis in not performed on Windows\"
            '''
          }
        }
      }
    }

    stage('Build') {
      when {
        expression {
          run_build_stage == true
        }
      }
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_MODULE &&
              module load gcc/\$GCC_VERSION &&
              ./tools/build_config/build.sh --build
            '''
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -build
            '''
          }
        }
      }
    }

    stage('Build-Docs') {
      when {
        expression {env.BUILD_DOCS?.toBoolean()}
      }
      steps {
        script {
          if (isUnix()) {
            sh '''
                export PATH=${PATH}:~/.local/bin &&
                module load python/\$PYTHON_VERSION &&
                module load cmake/\$CMAKE_VERSION &&
                ./tools/build_config/build.sh --docs
            '''
            archiveArtifacts(
              artifacts: 'build/docs.tar.gz',
              allowEmptyArchive: true,
              fingerprint: true
            )
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -docs
            '''
            archiveArtifacts(
              artifacts: 'build/docs.zip',
              allowEmptyArchive: true,
              fingerprint: true
            )
          }
        }
      }
    }

    stage('Test') {
      when {
        expression {
          run_test_stage == true
        }
      }
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_MODULE &&
              module load gcc/\$GCC_VERSION &&
              ./tools/build_config/build.sh --test
            '''
          }
          else {
            powershell './tools/build_config/build.ps1 -test'
          }
        }
      }
    }

    stage('Benchmark') {
      when {
        expression {
          run_benchmark_stage == true
        }
      }
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_MODULE &&
              module load gcc/\$GCC_VERSION &&
              ./tools/build_config/build.sh --benchmark
             '''
          }
          else {
            powershell './tools/build_config/build.ps1 -benchmark'
          }
        }
      }
    }

    stage('Package') {
      when {
        expression {
          run_build_stage == true
        }
      }
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              ./tools/build_config/build.sh --package
            '''
          }
          else {
            powershell './tools/build_config/build.ps1 -package'
          }
          // Archive a file containing the git revision being built. This
          // enables the Deploy pipelines to validate against this SHA, and
          // ensure the correct revision is tagged in Git.
          if (pli.build_type == 'Release') {
            def git_rev_file_name = "${env.JOB_BASE_NAME}-git-revision.sha"
            utilities.write_git_revision_to_file(git_rev_file_name)
            archiveArtifacts(artifacts: git_rev_file_name, fingerprint: true)
          }
        }

        // Archive the release package
        archiveArtifacts(
          artifacts: 'build/Horace-*',
          fingerprint: true
        )
      }
    }
  }

  post {
    always {
      // archive static analysis report
      archiveArtifacts(
        artifacts: '**/cppcheck.xml,**/mlint.json',
        allowEmptyArchive: true,
        fingerprint: true
      )

      recordIssues(
        tools: [
          cppCheck(pattern: '**/cppcheck.xml', reportEncoding: 'UTF-8'),
          issues(id: 'mlint', name: 'MLint', pattern: '**/mlint.json')
        ]
      )

      archiveArtifacts(
        artifacts: 'build/Testing/**/*.xml',
        allowEmptyArchive: true,
        fingerprint: true
      )
      xunit (
        testTimeMargin: '3000',
        thresholdMode: 1,
        thresholds: [
          skipped(failureThreshold: '0'),
          failed(failureThreshold: '0')
        ],
        tools: [
          CTest(
            pattern: 'build/Testing/**/*.xml',
            deleteOutputFiles: true,
            failIfNotNew: false,
            skipNoTestFiles: true,
            stopProcessingIfError: true
          )
        ]
      )

    }

    success {
      post_github_status("success", "The build succeeded")
    }

    unsuccessful {
      post_github_status("failure", "The build failed")
    }

    cleanup {
      deleteDir()
    }
  }
}
