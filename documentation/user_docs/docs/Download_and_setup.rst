####################
 Download and setup
####################

*********************
 System Requirements
*********************

-  Windows 64-bit, or Linux 64-bit operating system

-  Plenty of free disk space in order to cope with the combined data files (> 30GB)

-  8GB RAM (at the very least)

-  Preferably a recent version of Matlab.
   Horace is not tested on releases of Matlab older than R2018b,
   although we make efforts for it to be compatible with the last 5 years of
   releases.
   If you are forced to use an earlier release and run into a problem,
   please open a ticket on
   `GitHub <https://github.com/pace-neutrons/Horace/issues>`__
   and we will look into it.

**********
 Download
**********

Horace releases for Windows and Linux are available to download on
`GitHub <https://github.com/pace-neutrons/Horace/releases>`__.
These packages contain pre-compiled x64 Mex libraries for each OS.

Everything required to run Horace is within the package,
including `Herbert <https://github.com/pace-neutrons/Herbert>`__.

***************************
 Installation Instructions
***************************

To install Horace for the current user:

1. Extract the release archive to your preferred location.
2. Open Matlab and set that location as your working directory.
3. Run ``horace_install``.
4. Now you can call ``horace_on`` from anywhere to start using Horace.

**********************
 Horace Configuration
**********************

Horace uses configuration files to store its settings.
You can access these settings using the ``hor_config`` class.

.. code-block:: matlab

   >> hor_config

This will print the current Horace configuration.
Descriptions for each option are given below:

.. code-block:: matlab

   >> hc = hor_config()

   hc =

   hor_config with properties:

      % The buffer size for IO read/write processes (bytes)
      mem_chunk_size: 1000000
      % The maximum amount of memory to be used by pixel data in file-backed
      % algorithms (bytes)
      pixel_page_size: 1.7977e+308
      % The number of threads to use in Mex routines. This should not exceed
      % the number of physical cores on your machine.
      threads: 16
      % Ignore NaN data when making cuts (true or false)
      ignore_nan: 1
      % Ignore Inf data when making cuts (true or false)
      ignore_inf: 0
      % The verbosity of informational log messages:
      %  -1 - Display no logging
      %   0 - Display major logging information
      %   1 - Display minor and major logging information
      %   2 - Display all logging messages, including timing information
      log_level: -1
      % Make use of Mex libraries (true or false)
      use_mex: 1
      % Automatically delete temporary files generated by sqw generation (true or false)
      delete_tmp: 1
      % The directory to place temporary files during sqw generation
      working_directory: 'C:\temp'
      % Throw an error if a Mex library cannot be used (true or false) [debugging option]
      force_mex_if_use_mex: 1
      % Reference to Horace's high performance configuration
      high_perf_config_info: [1Ã—1 hpc_config]

Use the usual Matlab syntax to set configuration values:

.. code-block:: matlab

   hc.(property_name) = value;

******************************************
 High Performance Computing Configuration
******************************************

If your machine has several cores, then you may benefit from using Horace's
parallel computing options.

The ``hpc`` command can be used to enable/disable parallel computing options,
as well as provide suggested settings for the current system.

.. code-block:: matlab

   >> hpc;     % display the suggested configuration based on the current system
   >> hpc on   % enable parallel computing
   >> hpc off  % disable parallel computing


For finer grained control over things like: number of parallel workers,
use of Mex routines and which functions are performed in parallel,
use the ``hpc_config`` class.

.. code-block:: matlab

   >> help hpc_config
