# Copy template files into <build_dir>/local_init
file(MAKE_DIRECTORY ${LOCAL_INIT_DIR})

# Configure and copy horace_on into the build directory.
# This directory is added to the Matlab path when CTest is run, so that
# parallel workers can access horace_on/worker scripts.
# Note that LOCAL_INIT_DIR is defined in the top-level CMakeLists
configure_file("horace_on.m.template" "${LOCAL_INIT_DIR}/horace_on.m")

# Copy Horace worker templates
if(BUILD_TESTING)
    configure_file("worker_4testsV4.m.template" "${LOCAL_INIT_DIR}/worker_4testsV4.m")
endif()
configure_file("worker_v4.m.template" "${LOCAL_INIT_DIR}/worker_v4.m")

set(Horace_AUTO_GENERATED_FILE_WARNING
    "This file is auto-generated by CMake. Do not edit, any edits may be lost.")

# Configure the horace_version.m script. The template script is copied into
# herbert_core/admin and CMake's project version formatted into it. This
# provides the function with an up-to-date version number for every build.
configure_file("herbert_get_build_version.m.template"
               "${Horace_ROOT}/herbert_core/admin/herbert_get_build_version.m")

# Configure the version.h header. The template is copied into _LowLevelCode/cpp
# and defines macro VERSION with CMake's project version.
configure_file("version.h.template"
               "${Horace_ROOT}/_LowLevelCode/cpp/utility/version.h")

# Runs docify
configure_file("run_docify.m" "${CMAKE_CURRENT_BINARY_DIR}/run_docify.m")
add_custom_target(run_docify)
add_custom_command(
    TARGET run_docify
    COMMAND ${Matlab_MAIN_PROGRAM} -batch "run_docify"
)

# =============================================================================
# Install commands
# =============================================================================
install(
    FILES
        "horace_on.m.template"
        "worker_v4.m.template"
        "spinw_on.m.template"
        "horace_install.m"
    DESTINATION "."
)

# Builds compiled worker
find_program(
    Matlab_MCC_COMPILER
    "mcc"
    PATHS ${Matlab_BINARIES_DIR}
    NO_DEFAULT_PATH
)
if(Matlab_MCC_COMPILER)
    # We need to copy horace|herbert_core to a new folder because mcc doesn't like empty or docify files
    if(WIN32)
        add_custom_command(
            OUTPUT CTF
            COMMAND powershell New-Item -ItemType Directory -Force -Path "CTF"
            COMMAND powershell Copy-Item "${LOCAL_INIT_DIR}/worker_v2.m" "CTF"
            COMMAND cmd /c (robocopy "${Horace_CORE}" CTF/Horace /s /nfl /ndl /nc /ns /np) ^& IF %ERRORLEVEL% LEQ 3 exit 0
            COMMAND cmd /c (robocopy "${Herbert_CORE}" CTF/Herbert /s /nfl /ndl /nc /ns /np) ^& IF %ERRORLEVEL% LEQ 3 exit 0
            COMMAND powershell -Command "& {Get-ChildItem CTF -recurse | where-object {$_.length -eq 0} | ?{Remove-Item $_.fullname} }"
            COMMAND powershell -Command "& {Get-ChildItem CTF -recurse | where-object {$_.Name -match '_docify'} | ?{Remove-Item $_.fullname -recurse}}"
            COMMAND powershell -Command "& {Get-ChildItem CTF -recurse | where-object {$_.Name -match '@*_old'} | ?{Remove-Item $_.fullname -recurse}}"
        )
    else()
        add_custom_command(
            OUTPUT CTF
            COMMAND sh mkdir -p CTF
            COMMAND sh cp -r "${Horace_CORE}" "${Herbert_CORE}" "${LOCAL_INIT_DIR}"/worker_v2.m CTF/
            COMMAND sh find CTF -name _docify -o -name "@*_old" -o size 0 -exec rm -rf '{}' \;
        )
    endif()
    add_custom_command(
        OUTPUT compiled_worker.exe
        COMMAND ${Matlab_MCC_COMPILER} -W main:compiled_worker -a CTF "${CMAKE_CURRENT_SOURCE_DIR}/compiled_worker.m"
        DEPENDS CTF accumulate_cut_c bin_pixels_c calc_projections_c combine_sqw compute_pix_sums_c
                hdf_mex_reader mtimesx_mex sort_pixels_by_bins
    )
    # Need to add a custom target here - build it with `cmake --build . --target build_worker`
    add_custom_target(build_worker DEPENDS compiled_worker.exe)
else()
    add_custom_target(build_worker
        COMMAND echo "Error: Matlab compiler mcc not found" && exit 1
    )
endif()
