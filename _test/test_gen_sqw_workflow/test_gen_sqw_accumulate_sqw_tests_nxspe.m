classdef test_gen_sqw_accumulate_sqw_tests_nxspe < TestCaseWithSave
    % Series of tests of gen_sqw and associated functions
    % generated using multiple Matlab workers.
    %
    % Optionally writes results to output file to compare with previously
    % saved sample test results
    %---------------------------------------------------------------------
    % Usage:
    %
    %1) Normal usage:
    % Run all unit tests and compare their results with previously saved
    % results stored in test_gen_sqw_accumulate_sqw_output.mat file
    % located in the same folder as this function:
    %
    %>>runtests test_gen_sqw_accumulate_sqw_sep_session
    %---------------------------------------------------------------------
    %2) Run particular test case from the suite:
    %
    %>>tc = test_gen_sqw_accumulate_sqw_sep_session();
    %>>tc.test_[particular_test_name] e.g.:
    %>>tc.test_accumulate_sqw14();
    %or
    %>>tc.test_gen_sqw();
    %---------------------------------------------------------------------
    %3) Generate test file to store test results to compare with them later
    %   (it stores test results into tmp folder.)
    %
    %>>tc=test_gen_sqw_accumulate_sqw_sep_session('save');
    %>>tc.save():
    properties
        % properties to use as input for data
        test_data_path;
        test_functions_path;
        par_file;
        nfiles_max=6;

        pars;
        scale;

        proj;
        gen_sqw_par={};
        % files;
        spe_file={[]};

        instrum
        sample
        %
        % the field stores initial configuration, was in place when test
        % was started to run
        initial_config;
        %
        % the property describes common name of the test files allowing to
        % distinguish these files from the files, generated by other type
        % of test
        test_pref = 'nomex';

        working_dir
        
        nxspedir
        nxspedir121
        nxspedirpwd
        nxspefiles121
        nxspefilespwd
        nxspefile

    end

    methods(Static)
        function new_names = rename_file_list(input_list,new_ext)
            % change extension for list of files
            if ~iscell(input_list)
                input_list = {input_list};
            end
            new_names = cell(1,numel(input_list));
            for i=1:numel(input_list)
                fls = input_list{i};
                [fpath,fn,~] = fileparts(fls);
                flt = fullfile(fpath,[fn,new_ext]);
                new_names{i} = flt;
                if is_file(fls)
                    movefile(fls,flt,'f');
                end
            end
        end
    end

    methods
        function obj=test_gen_sqw_accumulate_sqw_tests_nxspe(name)
            obj.nxspedir = 'C:\Users\nvl96446\STFC\PACE\H-240610\Horace\_test\test_gen_sqw_workflow\';
            obj.nxspedir121 = [obj.nxspedir 'nxspe_files']; %maps';
            obj.nxspedirpwd = [obj.nxspedir 'nxspe_files_powder']; %maps';
            %obj.nxspefile = [obj.nxspedir '\MER62983_13.2meV_1to1.nxspe']; %MAP45862_250meV_1to1.nxspe'];
            obj.nxspefilespwd = {...
                [obj.nxspedirpwd '\MER62194_22.8meV_powder.nxspe'], ...
                [obj.nxspedirpwd '\MER62194_9.82meV_powder.nxspe'], ...
                [obj.nxspedirpwd '\MER62194_99.5meV_powder.nxspe'], ...
                [obj.nxspedirpwd '\MER66671_11.2meV_powder.nxspe'], ...
                [obj.nxspedirpwd '\LET105694_3.7meV_powder.nxspe'], ...
                [obj.nxspedirpwd '\MAP48017_50meV_powder.nxspe']  , ...
                [obj.nxspedirpwd '\MAP48675_100meV_powder.nxspe'] , ...
                [obj.nxspedirpwd '\MAR29858_180meV_powder.nxspe']   ...
                };
            obj.nxspefiles121 = { ...
                [obj.nxspedir121 '\MER66671_11.2meV_1to1.nxspe'],  ...                      [obj.nxspedir121 '\MER66671_11.2meV_1to1.nxspe']  ...
                [obj.nxspedir121 '\LET105694_3.7meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MAP45862_250meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MAP45863_250meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MAP48017_50meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MAP48675_100meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MER62983_24.5meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MER62983_59.9meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MER62984_13.2meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MER62984_24.5meV_1to1.nxspe'],  ...
                [obj.nxspedir121 '\MER62984_59.9meV_1to1.nxspe']  ...
                };
            if ~exist(obj.nxspefile, 'file')
                disp([obj.nxspefile ' not there']);
            else
                disp('it''s there');
            end
            
            obj.nfiles_max=1;
            en=cell(1,obj.nfiles_max);
            efix=zeros(1,obj.nfiles_max);
            psi=zeros(1,obj.nfiles_max);
            omega=zeros(1,obj.nfiles_max);
            dpsi=zeros(1,obj.nfiles_max);
            gl=zeros(1,obj.nfiles_max);
            gs=zeros(1,obj.nfiles_max);
            for i=1:obj.nfiles_max
                efix(i)=230+0.5*i;                       % different ei for each file
                en{i}=0.05*efix(i):0.2+i/50:0.95*efix(i);  % different energy bins for each file
                psi(i)=90-i+1;
                omega(i)=10+i/2;
                dpsi(i)=0.1+i/10;
                gl(i)=3-i/6;
                gs(i)=2.4+i/7;
            end
            psi=90:-1:90-obj.nfiles_max+1;

            emode=1;
            alatt=[4.4,5.5,6.6];
            angdeg=[100,105,110];
            u=[1.02,0.99,0.02];
            v=[0.025,-0.01,1.04];

            obj.gen_sqw_par={en,efix, emode, alatt, angdeg, u, v, psi, omega, dpsi, gl, gs};
        end
        
        function test_dummy(obj,varargin)
        end
        
        function test_gen_nxspe(obj,varargin)
            select = 1:1;
            en =obj.gen_sqw_par{1}(select);
            efix=obj.gen_sqw_par{2}(select);
            emode=obj.gen_sqw_par{3};
            alatt=obj.gen_sqw_par{4};
            angdeg=obj.gen_sqw_par{5};
            u=obj.gen_sqw_par{6};
            v=obj.gen_sqw_par{7};
            psi=obj.gen_sqw_par{8}(select);
            omega=obj.gen_sqw_par{9}(select);
            dpsi=obj.gen_sqw_par{10}(select);
            gl=obj.gen_sqw_par{11}(select);
            gs=obj.gen_sqw_par{12}(select);
            
            % test the first powder nxspe in gen_sqw; it will fail
            % because its azimuthal width range exceeds the detector height
            % limit
            % Remove this when the rest off the tests are working
            %{
            obj.nxspefile = obj.nxspefilespwd(1);
                disp(['??????? ' obj.nxspefile]);
                     [tmp_files,grid2,pix_data_range2]=gen_sqw (obj.nxspefile,       ...
                        '', 'outfile', efix, emode, alatt, angdeg,...
                        u, v, psi, omega, ...
                        dpsi, gl, gs);
            %}
            
            % test all 1to1 nxspe files to ensure they do not fail against
            % the detector height formula (or indeed for ny other reason)
            for ii=1:size(obj.nxspefiles121,2)
                     obj.nxspefile = obj.nxspefiles121{ii};
                disp('      ');
                disp(['oooooo ' obj.nxspefile])
                     [tmp_files,grid2,pix_data_range2]=gen_sqw (obj.nxspefile,       ...
                        '', 'outfile', efix, emode, alatt, angdeg,...
                        u, v, psi, omega, ...
                        dpsi, gl, gs);
                disp('   ');
             end

           % test all powder nxspe files, all of which should fail due to
           % being detected as powder and thus likely to cause detector
           % height problems
            for ii=1:size(obj.nxspefilespwd,2)
                obj.nxspefile = obj.nxspefilespwd{ii};
                disp('      ');
                disp(['xxxxxx ' obj.nxspefile])
                try
                    
                    [tmp_files,grid2,pix_data_range2]=gen_sqw (obj.nxspefile,       ...
                        '', 'outfile', efix, emode, alatt, angdeg,...
                        u, v, psi, omega, ...
                        dpsi, gl, gs);            
                    text = ['FAILURE: Powder nxspe was processed; expected ' ...
                            'failure due to azimuthal width data did not occur.']
                    assertFalse(true, text);
                catch ME
                    text = ['FAILURE: Powder nxspe was not processed: ' ME.message];
                    %assertFalse(true, text);
                    disp(['FAILURE:' ME.message]);
                    disp('');
                    disp('');
                end
            end
        end
        
 
 
 
         
         %
    end
end
